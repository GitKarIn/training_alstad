---
title: "data-visualization"
author: "ka"
format: html
editor: visual
---

```{r}
library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color pallet
```


## Read data

```{r}
data_visits <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f") %>%
janitor::clean_names()
```

```{r}
colnames(data_visits)
```


```{r}
glimpse(data_visits)
range(data_visits$date)

unique(data_visits$time_of_day)
```

# Getting data ready

```{r}

visits_long <- data_visits %>% 
  pivot_longer(cols = c("sm_boat","med_boat","lrg_boat","bank_angler","scientist","cars"),
               names_to ="visitor_type",
               values_to ="quantity") %>% 
  rename(restore_loc = eco_restore_approximate_location) %>% 
  select(-notes)
visits_long
```

## Plotting with 'ggplot2'

```{r}
ggplot(visits_long,
       aes(x = restore_loc, y = quantity)) +  
  geom_col()
```
## calculating data visits by visit type

```{r}
daily_visit <- visits_long %>% 
  group_by(restore_loc, date, visitor_type) %>% 
  summary(daily_visits = sum(quantity))
daily_visits
```
```{r}
daily_visits_loc <- visits_long %>%
    group_by(restore_loc, date, visitor_type) %>% 
    summarise(daily_visits = sum(quantity))
    
head(daily_visits_loc)
```




## Customizing our plot

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = "blue"))+
    geom_col()
```

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()


```


```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during July 2017 and March 2018")+
    coord_flip()+
    theme_bw()

```


## using 'theme()' function to further customize our plot

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during July 2017 and March 2018")+
    coord_flip()+
    theme_bw()+
    theme(legend.position = "bottom",
          axis.ticks.y = element_blank()) ## note we mention y-axis here
```

```{r}
my_theme <- theme_bw(base_size = 16) +
    theme(legend.position = "bottom",
          axis.ticks.y = element_blank())
```


```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during July 2017 and March 2018")+
    coord_flip()+
    my_theme+
    scale_y_continuous(breaks =seq(0,120,20))
```







## saving theme into an opbject





